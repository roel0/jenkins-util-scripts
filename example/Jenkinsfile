@Library("jenkins-util-scripts") _


println "Nbr of slave nodes: ${get_nodes().size()}"
println "First slave: ${get_node(get_nodes()[0].getNodeName())}"

node("master")
{
    println "operating system master: ${get_os()}"
}

add_node_env(node_name:"zeus", env_key:"iets", env_value:"value")
remove_node_env(node_name:"zeus", env_key:"iets")

// Only run on linux slaves which have
// the string 'tester' in their name
condition = { it ->
    it != jenkins.model.Jenkins.instance &&
    it.toComputer().isUnix() &&
    !it.getNodeName().contains("tester")
}

super_lock(['lock1', 'lock2']) {
    run_on_multiple_nodes(cmd: "uname -a", condition: condition)
}

node("master") {
    def xml =  '''
        <testsuite tests="3">
            <testcase classname="foo1" name="bar1"/>
            <testcase classname="foo2" name="bar2"/>
            <testcase classname="foo3" name="bar3">
                <failure type="nullpointer"> NULL </failure>
                <system-out>beep beep ERROR beep beep</system-out>
            </testcase>
        </testsuite>
    '''
    writeFile file:"test.xml", text: xml
    junit "test.xml"

    def results = get_junit_results()

    println "FAILED TC:"
    println "=========="

    for (def failed: results.failed) {
        println "Name ${failed.name}"
        println "Log: ${failed.log}"
        println "-----"
    }
}

try {
    super_stage("stage1") {
    }
    super_stage("stage2") {
        error "oei"
    }
} catch(e) {
}

println "Failed stages: ${get_failed_stages().join(',')}"

node("master")
{
   sh "echo 'job_duration\n${get_job_duration()}'>test.csv"
   plot csvFileName: 'plot-jobduration.csv', group: 'group', style: 'line', title: 'Job duration', 
        csvSeries: [[displayTableFlag: false, exclusionValues: '', file: 'test.csv', inclusionFlag: 'OFF', url: '']]
}

def plot_data = get_plot_data(plot: "jobduration", serie: "job_duration").collect() { it.toBigDecimal() }
println "Average job duration: ${plot_data.sum()/plot_data.size()}"

node("master")
{
   sh "echo 'avg_job_duration\n${plot_data.sum()/plot_data.size()}'>test.csv"
   plot csvFileName: 'plot-avgjobduration.csv', group: 'group', style: 'line', title: 'Avg Job duration', 
        csvSeries: [[displayTableFlag: false, exclusionValues: '', file: 'test.csv', inclusionFlag: 'OFF', url: '']]
}
